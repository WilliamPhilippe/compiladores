start {
              [0001, 0001] (0046, R_START) {start}
              [0001, 0007] (0018, BRACKET_CURLY_LEFT) {{}
  function int[] shellSort(int[] array) {
              [0002, 0003] (0049, R_FUNCTION) {function}
              [0002, 0012] (0033, R_INT) {int}
              [0002, 0015] (0016, BRACKET_SQUARE_LEFT) {[}
              [0002, 0016] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0002, 0018] (0005, ID) {shellSort}
              [0002, 0027] (0020, PARENTHESES_LEFT) {(}
              [0002, 0028] (0033, R_INT) {int}
              [0002, 0031] (0016, BRACKET_SQUARE_LEFT) {[}
              [0002, 0032] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0002, 0034] (0005, ID) {array}
              [0002, 0039] (0021, PARENTHESES_RIGHT) {)}
              [0002, 0041] (0018, BRACKET_CURLY_LEFT) {{}
    int n = array.size;
              [0003, 0005] (0033, R_INT) {int}
              [0003, 0009] (0005, ID) {n}
              [0003, 0011] (0006, ASSIGNMENT) {=}
              [0003, 0013] (0005, ID) {array}
              [0003, 0018] (0022, PERIOD) {.}
              [0003, 0019] (0051, R_SIZE) {size}
              [0003, 0023] (0024, SEMI_COLON) {;}
    int gap = (int) array.size / 2;
              [0004, 0005] (0033, R_INT) {int}
              [0004, 0009] (0005, ID) {gap}
              [0004, 0013] (0006, ASSIGNMENT) {=}
              [0004, 0015] (0020, PARENTHESES_LEFT) {(}
              [0004, 0016] (0033, R_INT) {int}
              [0004, 0019] (0021, PARENTHESES_RIGHT) {)}
              [0004, 0021] (0005, ID) {array}
              [0004, 0026] (0022, PERIOD) {.}
              [0004, 0027] (0051, R_SIZE) {size}
              [0004, 0032] (0028, SLASH) {/}
              [0004, 0034] (0001, INTEGER) {2}
              [0004, 0035] (0024, SEMI_COLON) {;}

    for(; gap > 0; gap = (int) gap/2) {
              [0006, 0005] (0044, R_FOR) {for}
              [0006, 0008] (0020, PARENTHESES_LEFT) {(}
              [0006, 0009] (0024, SEMI_COLON) {;}
              [0006, 0011] (0005, ID) {gap}
              [0006, 0015] (0009, GREATER) {>}
              [0006, 0017] (0001, INTEGER) {0}
              [0006, 0018] (0024, SEMI_COLON) {;}
              [0006, 0020] (0005, ID) {gap}
              [0006, 0024] (0006, ASSIGNMENT) {=}
              [0006, 0026] (0020, PARENTHESES_LEFT) {(}
              [0006, 0027] (0033, R_INT) {int}
              [0006, 0030] (0021, PARENTHESES_RIGHT) {)}
              [0006, 0032] (0005, ID) {gap}
              [0006, 0035] (0028, SLASH) {/}
              [0006, 0036] (0001, INTEGER) {2}
              [0006, 0037] (0021, PARENTHESES_RIGHT) {)}
              [0006, 0039] (0018, BRACKET_CURLY_LEFT) {{}
      loop (int i; gap; n;) {
              [0007, 0007] (0042, R_LOOP) {loop}
              [0007, 0012] (0020, PARENTHESES_LEFT) {(}
              [0007, 0013] (0033, R_INT) {int}
              [0007, 0017] (0005, ID) {i}
              [0007, 0018] (0024, SEMI_COLON) {;}
              [0007, 0020] (0005, ID) {gap}
              [0007, 0023] (0024, SEMI_COLON) {;}
              [0007, 0025] (0005, ID) {n}
              [0007, 0026] (0024, SEMI_COLON) {;}
              [0007, 0027] (0021, PARENTHESES_RIGHT) {)}
              [0007, 0029] (0018, BRACKET_CURLY_LEFT) {{}
        int temp = array[i];
              [0008, 0009] (0033, R_INT) {int}
              [0008, 0013] (0005, ID) {temp}
              [0008, 0018] (0006, ASSIGNMENT) {=}
              [0008, 0020] (0005, ID) {array}
              [0008, 0025] (0016, BRACKET_SQUARE_LEFT) {[}
              [0008, 0026] (0005, ID) {i}
              [0008, 0027] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0008, 0028] (0024, SEMI_COLON) {;}
        
        int j;
              [0010, 0009] (0033, R_INT) {int}
              [0010, 0013] (0005, ID) {j}
              [0010, 0014] (0024, SEMI_COLON) {;}
        for (j = i; j >= gap & array[j - gap] > temp; j = j - gap) {
              [0011, 0009] (0044, R_FOR) {for}
              [0011, 0013] (0020, PARENTHESES_LEFT) {(}
              [0011, 0014] (0005, ID) {j}
              [0011, 0016] (0006, ASSIGNMENT) {=}
              [0011, 0018] (0005, ID) {i}
              [0011, 0019] (0024, SEMI_COLON) {;}
              [0011, 0021] (0005, ID) {j}
              [0011, 0023] (0010, GREATER_EQUAL) {>=}
              [0011, 0026] (0005, ID) {gap}
              [0011, 0030] (0007, AND) {&}
              [0011, 0032] (0005, ID) {array}
              [0011, 0037] (0016, BRACKET_SQUARE_LEFT) {[}
              [0011, 0038] (0005, ID) {j}
              [0011, 0040] (0026, MINUS) {-}
              [0011, 0042] (0005, ID) {gap}
              [0011, 0045] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0011, 0047] (0009, GREATER) {>}
              [0011, 0049] (0005, ID) {temp}
              [0011, 0053] (0024, SEMI_COLON) {;}
              [0011, 0055] (0005, ID) {j}
              [0011, 0057] (0006, ASSIGNMENT) {=}
              [0011, 0059] (0005, ID) {j}
              [0011, 0061] (0026, MINUS) {-}
              [0011, 0063] (0005, ID) {gap}
              [0011, 0066] (0021, PARENTHESES_RIGHT) {)}
              [0011, 0068] (0018, BRACKET_CURLY_LEFT) {{}
          array[j] = array[j - gap];
              [0012, 0011] (0005, ID) {array}
              [0012, 0016] (0016, BRACKET_SQUARE_LEFT) {[}
              [0012, 0017] (0005, ID) {j}
              [0012, 0018] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0012, 0020] (0006, ASSIGNMENT) {=}
              [0012, 0022] (0005, ID) {array}
              [0012, 0027] (0016, BRACKET_SQUARE_LEFT) {[}
              [0012, 0028] (0005, ID) {j}
              [0012, 0030] (0026, MINUS) {-}
              [0012, 0032] (0005, ID) {gap}
              [0012, 0035] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0012, 0036] (0024, SEMI_COLON) {;}
        }
              [0013, 0009] (0019, BRACKET_CURLY_RIGHT) {}}

        array[j] = temp;
              [0015, 0009] (0005, ID) {array}
              [0015, 0014] (0016, BRACKET_SQUARE_LEFT) {[}
              [0015, 0015] (0005, ID) {j}
              [0015, 0016] (0017, BRACKET_SQUARE_RIGHT) {]}
              [0015, 0018] (0006, ASSIGNMENT) {=}
              [0015, 0020] (0005, ID) {temp}
              [0015, 0024] (0024, SEMI_COLON) {;}

      }
              [0017, 0007] (0019, BRACKET_CURLY_RIGHT) {}}
    }
              [0018, 0005] (0019, BRACKET_CURLY_RIGHT) {}}

    return array;
              [0020, 0005] (0050, R_RETURN) {return}
              [0020, 0012] (0005, ID) {array}
              [0020, 0017] (0024, SEMI_COLON) {;}
  }
              [0021, 0003] (0019, BRACKET_CURLY_RIGHT) {}}
};
              [0022, 0001] (0019, BRACKET_CURLY_RIGHT) {}}
              [0022, 0002] (0024, SEMI_COLON) {;}

1  start {
          S = Principal
          Principal = 'start' '{' Programa '}' ';'
              [0001, 0001] (0047,               R_START) {start}
              [0001, 0007] (0018,    BRACKET_CURLY_LEFT) {{}
   2    function int fibonacci(int limite) {
          Programa = Funcao Programa
          Funcao = 'function' TypeFuncao Id '(' DeclParametros ')' '{' Programa '}'
              [0002, 0003] (0050,            R_FUNCTION) {function}
          TypeFuncao = Type ArrayType
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0002, 0012] (0034,                 R_INT) {int}
          ArrayType = ε
          Id = 'id'
              [0002, 0016] (0005,                    ID) {fibonacci}
              [0002, 0025] (0020,      PARENTHESES_LEFT) {(}
          DeclParametros = Type ArrayType Id ListaParametros
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0002, 0026] (0034,                 R_INT) {int}
          ArrayType = ε
          Id = 'id'
              [0002, 0030] (0005,                    ID) {limite}
          ListaParametros = ε
              [0002, 0036] (0021,     PARENTHESES_RIGHT) {)}
              [0002, 0038] (0018,    BRACKET_CURLY_LEFT) {{}
   3      int fib = 0;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0003, 0005] (0034,                 R_INT) {int}
          Id = 'id'
              [0003, 0009] (0005,                    ID) {fib}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0003, 0013] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = 'constanteInteira'
              [0003, 0015] (0001,               INTEGER) {0}
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
   4      int aux = 0;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0004, 0005] (0034,                 R_INT) {int}
          Id = 'id'
              [0004, 0009] (0005,                    ID) {aux}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0004, 0013] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = 'constanteInteira'
              [0004, 0015] (0001,               INTEGER) {0}
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
   5      int n;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0005, 0005] (0034,                 R_INT) {int}
          Id = 'id'
              [0005, 0009] (0005,                    ID) {n}
          ArrayDecl = ε
          IniciarId =  ε
          ListaId = ε
   6
   7      while(fib < limite) {
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = While
          While = 'while' '(' Expressao ')' '{' Programa '}'
              [0007, 0005] (0044,               R_WHILE) {while}
              [0007, 0010] (0020,      PARENTHESES_LEFT) {(}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0007, 0011] (0005,                    ID) {fib}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = OperadoresLogicos ValorLogico
          OperadoresLogicos = '<'
              [0007, 0015] (0011,                  LESS) {<}
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0007, 0017] (0005,                    ID) {limite}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          ExpAnd = ε
          ExpOr = ε
              [0007, 0023] (0021,     PARENTHESES_RIGHT) {)}
              [0007, 0025] (0018,    BRACKET_CURLY_LEFT) {{}
   8        put (fib + '-');
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = Put
          Get = 'put' '(' Argumentos ')' ';'
              [0008, 0007] (0049,                 R_PUT) {put}
              [0008, 0011] (0020,      PARENTHESES_LEFT) {(}
          Argumentos = Expressao ArgumentosLista
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0008, 0012] (0005,                    ID) {fib}
          Call = ε
          ExpMulti = ε
          ExpAditiva = + ExpM ExpAditiva
              [0008, 0016] (0025,                  PLUS) {+}
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = ExpString
          ExpString = Palavra OpString
          Palavra = 'char'
              [0008, 0018] (0004,                  CHAR) {'-'}
          OpString = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
          ArgumentosLista = ε
              [0008, 0021] (0021,     PARENTHESES_RIGHT) {)}
              [0008, 0022] (0024,            SEMI_COLON) {;}
   9        fib = fib + aux;
          Instrucao = Command Instrucao
          Command = AtrOuFunInst
          AtrOuFunInst = Id EqualOuCall
          Id = 'id'
              [0009, 0007] (0005,                    ID) {fib}
          ArrayDecl = ε
          EqualOuCall = Atribuicao
          Atribuicao = '=' Expressao ';'
              [0009, 0011] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0009, 0013] (0005,                    ID) {fib}
          Call = ε
          ExpMulti = ε
          ExpAditiva = + ExpM ExpAditiva
              [0009, 0017] (0025,                  PLUS) {+}
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0009, 0019] (0005,                    ID) {aux}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0009, 0022] (0024,            SEMI_COLON) {;}
  10        aux = n;
          Instrucao = Command Instrucao
          Command = AtrOuFunInst
          AtrOuFunInst = Id EqualOuCall
          Id = 'id'
              [0010, 0007] (0005,                    ID) {aux}
          ArrayDecl = ε
          EqualOuCall = Atribuicao
          Atribuicao = '=' Expressao ';'
              [0010, 0011] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0010, 0013] (0005,                    ID) {n}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0010, 0014] (0024,            SEMI_COLON) {;}
  11        n = fib;
          Instrucao = Command Instrucao
          Command = AtrOuFunInst
          AtrOuFunInst = Id EqualOuCall
          Id = 'id'
              [0011, 0007] (0005,                    ID) {n}
          ArrayDecl = ε
          EqualOuCall = Atribuicao
          Atribuicao = '=' Expressao ';'
              [0011, 0009] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0011] (0005,                    ID) {fib}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0011, 0014] (0024,            SEMI_COLON) {;}
  12      }
          Instrucao = ε
          Programa =  ε
              [0012, 0005] (0019,   BRACKET_CURLY_RIGHT) {}}
  13
  14      return n;
          Instrucao = Command Instrucao
          Command = Retorno
          Retorno = 'return' Expressao ';'
              [0014, 0005] (0051,              R_RETURN) {return}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0014, 0012] (0005,                    ID) {n}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0014, 0013] (0024,            SEMI_COLON) {;}
  15    }
          Instrucao = ε
          Programa =  ε
              [0015, 0003] (0019,   BRACKET_CURLY_RIGHT) {}}
  16  };
          Programa =  ε
              [0016, 0001] (0019,   BRACKET_CURLY_RIGHT) {}}
              [0016, 0002] (0024,            SEMI_COLON) {;}

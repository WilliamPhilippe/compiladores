   1  start {
          S = Principal
          Principal = 'start' '{' Programa '}' ';'
              [0001, 0001] (0047,               R_START) {start}
              [0001, 0007] (0018,    BRACKET_CURLY_LEFT) {{}
   2    function int[] shellSort(int[] array) {
          Programa = Funcao Programa
          Funcao = 'function' TypeFuncao Id '(' DeclParametros ')' '{' Programa '}'
              [0002, 0003] (0050,            R_FUNCTION) {function}
          TypeFuncao = Type ArrayType
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0002, 0012] (0034,                 R_INT) {int}
          ArrayType = '[' ']'
              [0002, 0015] (0016,   BRACKET_SQUARE_LEFT) {[}
              [0002, 0016] (0017,  BRACKET_SQUARE_RIGHT) {]}
          Id = 'id'
              [0002, 0018] (0005,                    ID) {shellSort}
              [0002, 0027] (0020,      PARENTHESES_LEFT) {(}
          DeclParametros = Type ArrayType Id ListaParametros
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0002, 0028] (0034,                 R_INT) {int}
          ArrayType = '[' ']'
              [0002, 0031] (0016,   BRACKET_SQUARE_LEFT) {[}
              [0002, 0032] (0017,  BRACKET_SQUARE_RIGHT) {]}
          Id = 'id'
              [0002, 0034] (0005,                    ID) {array}
          ListaParametros = ε
              [0002, 0039] (0021,     PARENTHESES_RIGHT) {)}
              [0002, 0041] (0018,    BRACKET_CURLY_LEFT) {{}
   3      int n = array.size;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0003, 0005] (0034,                 R_INT) {int}
          Id = 'id'
              [0003, 0009] (0005,                    ID) {n}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0003, 0011] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0003, 0013] (0005,                    ID) {array}
          Call = OperadorSize
          OperadorSize = '.' 'size'
              [0003, 0018] (0022,                PERIOD) {.}
              [0003, 0019] (0052,                R_SIZE) {size}
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
   4      int gap = (int) array.size / 2;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0004, 0005] (0034,                 R_INT) {int}
          Id = 'id'
              [0004, 0009] (0005,                    ID) {gap}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0004, 0013] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = CastingOuExpressao
          CastingOuExpressao = '(' TypeOrExp
              [0004, 0015] (0020,      PARENTHESES_LEFT) {(}
          TypeORExp = Type ')' Expressao
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0004, 0016] (0034,                 R_INT) {int}
              [0004, 0019] (0021,     PARENTHESES_RIGHT) {)}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0004, 0021] (0005,                    ID) {array}
          Call = OperadorSize
          OperadorSize = '.' 'size'
              [0004, 0026] (0022,                PERIOD) {.}
              [0004, 0027] (0052,                R_SIZE) {size}
          ExpMulti = / ExpUnaria ExpMulti
              [0004, 0032] (0028,                 SLASH) {/}
          ExpUnaria = Valor
          Valor = 'constanteInteira'
              [0004, 0034] (0001,               INTEGER) {2}
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
   5
   6      for(; gap > 0; gap = (int) gap/2) {
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = For
          For = 'for' '(' [DeclaraVarFor] ';' [Expressao] ';' [AtribuicaoFor] ')' '{' Programa '}'
              [0006, 0005] (0045,                 R_FOR) {for}
              [0006, 0008] (0020,      PARENTHESES_LEFT) {(}
              [0006, 0009] (0024,            SEMI_COLON) {;}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0006, 0011] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = OperadoresLogicos ValorLogico
          OperadoresLogicos = '>'
              [0006, 0015] (0009,               GREATER) {>}
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = 'constanteInteira'
              [0006, 0017] (0001,               INTEGER) {0}
          ExpMulti = ε
          ExpAditiva = ε
          ExpAnd = ε
          ExpOr = ε
              [0006, 0018] (0024,            SEMI_COLON) {;}
          AtribuicaoFor = Id '=' Expressao ListaAtriFor
          Id = 'id'
              [0006, 0020] (0005,                    ID) {gap}
              [0006, 0024] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = CastingOuExpressao
          CastingOuExpressao = '(' TypeOrExp
              [0006, 0026] (0020,      PARENTHESES_LEFT) {(}
          TypeORExp = Type ')' Expressao
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0006, 0027] (0034,                 R_INT) {int}
              [0006, 0030] (0021,     PARENTHESES_RIGHT) {)}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0006, 0032] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = / ExpUnaria ExpMulti
              [0006, 0035] (0028,                 SLASH) {/}
          ExpUnaria = Valor
          Valor = 'constanteInteira'
              [0006, 0036] (0001,               INTEGER) {2}
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
          ListaAtriFor = ε
              [0006, 0037] (0021,     PARENTHESES_RIGHT) {)}
              [0006, 0039] (0018,    BRACKET_CURLY_LEFT) {{}
   7        loop (int i; gap; n;) {
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = Loop
          Loop = 'loop' '(' 'int' Id ';' ExpNum ';' ExpNum ';' [ExpNum] ')' '{' Programa '}'
              [0007, 0007] (0043,                R_LOOP) {loop}
              [0007, 0012] (0020,      PARENTHESES_LEFT) {(}
              [0007, 0013] (0034,                 R_INT) {int}
          Id = 'id'
              [0007, 0017] (0005,                    ID) {i}
              [0007, 0018] (0024,            SEMI_COLON) {;}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0007, 0020] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0007, 0023] (0024,            SEMI_COLON) {;}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0007, 0025] (0005,                    ID) {n}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0007, 0026] (0024,            SEMI_COLON) {;}
              [0007, 0027] (0021,     PARENTHESES_RIGHT) {)}
              [0007, 0029] (0018,    BRACKET_CURLY_LEFT) {{}
   8          int temp = array[i];
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0008, 0009] (0034,                 R_INT) {int}
          Id = 'id'
              [0008, 0013] (0005,                    ID) {temp}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0008, 0018] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0008, 0020] (0005,                    ID) {array}
          Call = ArrayDecl
          ArrayDecl = '[' ExpNum ']'
              [0008, 0025] (0016,   BRACKET_SQUARE_LEFT) {[}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0008, 0026] (0005,                    ID) {i}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0008, 0027] (0017,  BRACKET_SQUARE_RIGHT) {]}
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
   9
  10          int j = i;
          Programa = DeclaraVar Programa
          DeclaraVar = Type Id ArrayDecl IniciarId ListaId ';'
          Type = 'int' | 'float' | 'char' | 'string' | 'bool'
              [0010, 0009] (0034,                 R_INT) {int}
          Id = 'id'
              [0010, 0013] (0005,                    ID) {j}
          ArrayDecl = ε
          IniciarId = '=' Expressao
              [0010, 0015] (0006,            ASSIGNMENT) {=}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0010, 0017] (0005,                    ID) {i}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          ListaId = ε
  11          for (; j >= gap & array[j - gap] > temp; j = j - gap) {
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = For
          For = 'for' '(' [DeclaraVarFor] ';' [Expressao] ';' [AtribuicaoFor] ')' '{' Programa '}'
              [0011, 0009] (0045,                 R_FOR) {for}
              [0011, 0013] (0020,      PARENTHESES_LEFT) {(}
              [0011, 0014] (0024,            SEMI_COLON) {;}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0016] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = OperadoresLogicos ValorLogico
          OperadoresLogicos = '>='
              [0011, 0018] (0010,         GREATER_EQUAL) {>=}
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0021] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          ExpAnd = '&' ExpN ExpAnd
              [0011, 0025] (0007,                   AND) {&}
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0027] (0005,                    ID) {array}
          Call = ArrayDecl
          ArrayDecl = '[' ExpNum ']'
              [0011, 0032] (0016,   BRACKET_SQUARE_LEFT) {[}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0033] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = - ExpM ExpAditiva
              [0011, 0035] (0026,                 MINUS) {-}
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0037] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0011, 0040] (0017,  BRACKET_SQUARE_RIGHT) {]}
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = OperadoresLogicos ValorLogico
          OperadoresLogicos = '>'
              [0011, 0042] (0009,               GREATER) {>}
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0044] (0005,                    ID) {temp}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          ExpAnd = ε
          ExpOr = ε
              [0011, 0048] (0024,            SEMI_COLON) {;}
          AtribuicaoFor = Id '=' Expressao ListaAtriFor
          Id = 'id'
              [0011, 0050] (0005,                    ID) {j}
              [0011, 0052] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0054] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = - ExpM ExpAditiva
              [0011, 0056] (0026,                 MINUS) {-}
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0011, 0058] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
          ListaAtriFor = ε
              [0011, 0061] (0021,     PARENTHESES_RIGHT) {)}
              [0011, 0063] (0018,    BRACKET_CURLY_LEFT) {{}
  12            array[j] = array[j - gap];
          Programa = Instrucao Programa
          Instrucao = Command Instrucao
          Command = AtrOuFunInst
          AtrOuFunInst = Id EqualOuCall
          Id = 'id'
              [0012, 0011] (0005,                    ID) {array}
          ArrayDecl = '[' ExpNum ']'
              [0012, 0016] (0016,   BRACKET_SQUARE_LEFT) {[}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0012, 0017] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0012, 0018] (0017,  BRACKET_SQUARE_RIGHT) {]}
          EqualOuCall = Atribuicao
          Atribuicao = '=' Expressao ';'
              [0012, 0020] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0012, 0022] (0005,                    ID) {array}
          Call = ArrayDecl
          ArrayDecl = '[' ExpNum ']'
              [0012, 0027] (0016,   BRACKET_SQUARE_LEFT) {[}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0012, 0028] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = - ExpM ExpAditiva
              [0012, 0030] (0026,                 MINUS) {-}
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0012, 0032] (0005,                    ID) {gap}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0012, 0035] (0017,  BRACKET_SQUARE_RIGHT) {]}
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0012, 0036] (0024,            SEMI_COLON) {;}
  13          }
          Instrucao = ε
          Programa =  ε
              [0013, 0009] (0019,   BRACKET_CURLY_RIGHT) {}}
  14
  15          array[j] = temp;
          Instrucao = Command Instrucao
          Command = AtrOuFunInst
          AtrOuFunInst = Id EqualOuCall
          Id = 'id'
              [0015, 0009] (0005,                    ID) {array}
          ArrayDecl = '[' ExpNum ']'
              [0015, 0014] (0016,   BRACKET_SQUARE_LEFT) {[}
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0015, 0015] (0005,                    ID) {j}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
              [0015, 0016] (0017,  BRACKET_SQUARE_RIGHT) {]}
          EqualOuCall = Atribuicao
          Atribuicao = '=' Expressao ';'
              [0015, 0018] (0006,            ASSIGNMENT) {=}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0015, 0020] (0005,                    ID) {temp}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0015, 0024] (0024,            SEMI_COLON) {;}
  16
  17        }
          Instrucao = ε
          Programa =  ε
              [0017, 0007] (0019,   BRACKET_CURLY_RIGHT) {}}
  18      }
          Instrucao = ε
          Programa =  ε
              [0018, 0005] (0019,   BRACKET_CURLY_RIGHT) {}}
  19
  20      return array;
          Instrucao = Command Instrucao
          Command = Retorno
          Retorno = 'return' Expressao ';'
              [0020, 0005] (0051,              R_RETURN) {return}
          Expressao = ExpBool
          ExpBool = ExpA ExpOr
          ExpA = ExpN ExpAnd
          ExpN = ExpressaoLogica
          ExpressaoLogica = ValorLogico OperacaoLogica
          ValorLogico = ExpNum
          ExpNum = ExpM ExpAditiva
          ExpM = ExpUnaria ExpMulti
          ExpUnaria = Valor
          Valor = IdOuFuncCall
          IdOuFuncCall = Id Call
          Id = 'id'
              [0020, 0012] (0005,                    ID) {array}
          Call = ε
          ExpMulti = ε
          ExpAditiva = ε
          OperacaoLogica = ε
          ExpAnd = ε
          ExpOr = ε
              [0020, 0017] (0024,            SEMI_COLON) {;}
  21    }
          Instrucao = ε
          Programa =  ε
              [0021, 0003] (0019,   BRACKET_CURLY_RIGHT) {}}
  22  };
          Programa =  ε
              [0022, 0001] (0019,   BRACKET_CURLY_RIGHT) {}}
              [0022, 0002] (0024,            SEMI_COLON) {;}
